
var GEOS = {};

function initGeos(){

  GEOS.cube = new THREE.BoxGeometry( 1 , 1 , 1 );
  GEOS.cube.computeFaceNormals();
  GEOS.cube.computeVertexNormals();
  GEOS.box50_50_50 = new THREE.BoxGeometry( 1 , 1 , 1, 50,50,50 );
  GEOS.box = GEOS.cube; 
  GEOS.tetra = new THREE.TetrahedronGeometry( 1 , 0 );
  GEOS.icosa = new THREE.IcosahedronGeometry( 1 , 0 );
  GEOS.icosa6 = new THREE.IcosahedronGeometry( 1 , 6 );
  GEOS.icosa5 = new THREE.IcosahedronGeometry( 1 , 5 );
  GEOS.octa = new THREE.OctahedronGeometry( 1 , 0 );

  GEOS.feather1 = feather1();
  GEOS.feather2 = feather2();
  GEOS.feather3 = feather3();
  
  
  GEOS.mandala1 = mandala1();



  var models = [

    "skull",
    "skull1",
    "totem",
    "bone",
    "logoGeo"

  ]
  for( var i=0; i < models.length; i++ ){
  
    var geoName = models[i];
    loader.beginLoading();
    var x = { geoName: geoName };
    loader.OBJLoader.load( 'models/' + geoName +'.obj' , function( object ){
      
      object.traverse( function ( child ) {
          if ( child instanceof THREE.Mesh ) {
            GEOS[this.geoName] = child.geometry;     
            GEOS[this.geoName].computeFaceNormals();
            GEOS[this.geoName].computeVertexNormals();
         //   assignUVs( GEOS[this.geoName] );
          /* 
            var m = new THREE.Mesh( GEOS[geoName] , new THREE.MeshNormalMaterial() );
            m.scale.multiplyScalar( .00001 );
            this.scene.add( m );*/
          }
      }.bind( this ));

      loader.endLoading();
    }.bind( x ));

  }

  for( var propt in GEOS ){

    GEOS[ propt ].computeVertexNormals();
    GEOS[ propt ].computeFaceNormals();
    GEOS[ propt ].computeVertexNormals();
    GEOS[ propt ].verticesNeedUpdate = true;
    GEOS[ propt ].normalsNeedUpdate = true;


   //assignUVs( GEOS[ propt ] );
  }

  function feather1(){

    var g = new THREE.Geometry();

    for( var i = 0; i < 10; i++ ){

      var b = new THREE.Mesh( new THREE.BoxGeometry(1,1,1));

      b.scale.y = .2;
      b.scale.x = .2;

      b.position.z  = -i * .3;//*.1 + .3 * Math.random();
      b.position.x = (Math.random()-.5) * i *.1;
      b.position.y = (Math.random()-.5) * i *.1;
     // b.rotation.x = (Math.random()-.5) * i / 10;
     // b.rotation.y = (Math.random()-.5)* i / 10;
     //
      b.lookAt( new THREE.Vector3() );


      b.updateMatrix();

      g.merge( b.geometry, b.matrix );



    }

    g.computeFaceNormals();
    g.computeVertexNormals();




    return g;


  }

  function feather2(){

    var g = new THREE.Geometry();

    for( var i = 0; i < 10; i++ ){

      var b = new THREE.Mesh( new THREE.TetrahedronGeometry(1,0));


      b.scale.y = .2;
      b.scale.x = .2;
      b.scale.z = 1.;

      b.position.z  = -i * .3;//*.1 + .3 * Math.random();
      b.position.x = (Math.random()-.5) * i *.6;
      b.position.y = (Math.random()-.5) * i *.6;

      b.lookAt( new THREE.Vector3() );
    //  b.rotation.x = (Math.random()-.5) * i / 10;
    //  b.rotation.y = (Math.random()-.5)* i / 10;


      b.updateMatrix();

      g.merge( b.geometry, b.matrix );



    }

    g.computeFaceNormals();
    g.computeVertexNormals();

    return g;


  }

  function feather3(){

    var g = new THREE.Geometry();

    for( var i = 0; i < 10; i++ ){

      var b = new THREE.Mesh( new THREE.IcosahedronGeometry(.5,0));


      b.scale.y = .2;
      b.scale.x = .2;
      b.scale.z = 1.;

      b.position.z  = -i * .3;//*.1 + .3 * Math.random();
      b.position.x = (Math.random()-.5) * i *.6;
      b.position.y = (Math.random()-.5) * i *.6;

      b.lookAt( new THREE.Vector3() );
    //  b.rotation.x = (Math.random()-.5) * i / 10;
    //  b.rotation.y = (Math.random()-.5)* i / 10;


      b.updateMatrix();

      g.merge( b.geometry, b.matrix );



    }

    g.computeFaceNormals();
    g.computeVertexNormals();

    return g;


  }

  function mandala1(){

    var g = new THREE.Geometry();

    var m = new THREE.BoxGeometry(1,1,1)
    for( var i = 0; i < 10; i++ ){

      var b = new THREE.Mesh( m );


     b.scale.y = .2;
      b.scale.x = .2;
      b.scale.z = 1.;

      var r = (i / 10 ) * 2 * Math.PI;
      b.position.x = Math.cos( r );
      b.position.y = Math.sin( r );

      b.lookAt( new THREE.Vector3() );
    //  b.rotation.x = (Math.random()-.5) * i / 10;
    //  b.rotation.y = (Math.random()-.5)* i / 10;


      b.updateMatrix();

      g.merge( b.geometry, b.matrix );



    }

    g.computeFaceNormals();
    g.computeVertexNormals();

    return g;


  }

   function mandala1(){

    var g = new THREE.Geometry();

    var m = new THREE.BoxGeometry(1,1,1)
    for( var i = 0; i < 10; i++ ){

      var b = new THREE.Mesh( m );


     b.scale.y = .1;
      b.scale.x = .4;
      b.scale.z = 1.;

      var r = (i / 10 ) * 2 * Math.PI;
      b.position.x = Math.cos( r );
      b.position.y = Math.sin( r );
      b.position.z = -1;

      b.lookAt( new THREE.Vector3() );
    //  b.rotation.x = (Math.random()-.5) * i / 10;
    //  b.rotation.y = (Math.random()-.5)* i / 10;


      b.updateMatrix();

      g.merge( b.geometry, b.matrix );



    }

    g.computeFaceNormals();
    g.computeVertexNormals();

    return g;


  }


  /*loader.addToLoadBar();
  loader.OBJLoader.load( 'lib/totem_6.obj' , function( object ){
    object.traverse( function ( child ) {
        if ( child instanceof THREE.Mesh ) {
          GEOS.totemGeo = child.geometry;       
        }
    });
    loader.loadBarAdd();
  });*/

  
    
 /* loader.addToLoadBar();
  loader.OBJLoader.load( 'models/logoGeo.obj' , function( object ){
    object.traverse( function ( child ) {
        if ( child instanceof THREE.Mesh ) {
          GEOS.logoGeo = child.geometry;
                GEOS[geoName].computeFaceNormals();
            GEOS[geoName].computeVertexNormals();
        }
    });
    loader.loadBarAdd();
  });*/






}
